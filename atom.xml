<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nanagan.github.io</id>
    <title>Nana&apos;s Blog</title>
    <updated>2021-02-23T07:57:57.784Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nanagan.github.io"/>
    <link rel="self" href="https://nanagan.github.io/atom.xml"/>
    <subtitle>鹅厂低级工程师（大雾</subtitle>
    <logo>https://nanagan.github.io/images/avatar.png</logo>
    <icon>https://nanagan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Nana&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[浅谈不同压测平台的使用体验（对比JMeter）]]></title>
        <id>https://nanagan.github.io/post/18246586/</id>
        <link href="https://nanagan.github.io/post/18246586/">
        </link>
        <updated>2021-02-23T07:50:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="压测平台是什么">压测平台是什么？</h1>
<p>压测，即压力测试，作用是对各种服务对象进行压力测试以获得该服务处于或<strong>超过预期负载</strong>时系统的运行情况，进而判断系统在峰值负载或超出最大负载情况下的处理能力。</p>
<p>压测工具，顾名思义，就是用来进行压力测试的工具，常用的有ab、jmeter、LoadRunner和wrk等等。</p>
<p>而由于在整个压测过程中存在以下问题：</p>
<ul>
<li>
<p><strong>时间成本</strong>：每次测试都需要重新搭建一套生产环境，成本太高，且几乎每个环节都需要人力支撑</p>
</li>
<li>
<p><strong>数据成本</strong>：脚本、测试数据、压测机器、测试报告无法沉淀</p>
</li>
<li>
<p><strong>风险成本</strong>：测试用例多，生产压测缺乏平台流程管理，手工执行非常容易出错</p>
</li>
<li>
<p><strong>自动化问题</strong>：自动化性能基线无统一平台支撑，测试过程中靠手动监控，覆盖不全且定位问题困难</p>
</li>
</ul>
<p>为了解决以上这些问题、更好地满足自己/用户的压测需求，不少企业在开源压测工具的基础上进行二次开发，将压测流程管控、压测任务管理和自动化性能基线等功能整合在一起，形成一个可以支撑各种个性化压测需求的分布式业务系统，也就是压测平台。</p>
<h1 id="本文主要讲什么">本文主要讲什么？</h1>
<p>本文浅显地分析了不同压测平台的使用体验，并与经典压测工具JMeter进行对比。</p>
<p>主要对比的指标有：</p>
<ul>
<li>是否适合新手使用</li>
<li>UI界面是否符合用户操作习惯</li>
<li>压测部分的功能是否齐全，足够满足用户的各种需求</li>
<li>结果分析的报告是否全面</li>
<li>社区建设是否丰富</li>
</ul>
<h1 id="性能测试pts阿里云">性能测试PTS（阿里云）</h1>
<p>性能测试 PTS（Performance Testing Service）是阿里云推出的一款具备分布式压测能力的SaaS压测平台。与普遍使用的压测工具相比，PTS所宣传的特点有：</p>
<ol>
<li>
<p>施压流量来自真实CDN节点</p>
<p>在PTS服务中进行施压配置时，可以选择<strong>国内公网</strong>和<strong>阿里云内网</strong>两种模式来设置压力来源。在国内公网模式中，PTS服务会分配来自全国各地的公网IP，并且根据压测的量级来分配对应的节点资源（IP），压力来源足够分散，可以最大程度模拟真实流量的路径。</p>
</li>
<li>
<p>纯SaaS平台，使用时无需额外安装和部署</p>
<blockquote>
<p>SaaS（Software as a service）软件即服务，也就是说，软件的服务器在云端，可以通过网络提供服务。</p>
</blockquote>
<p>阿里云将PTS所有服务都web化，用户可以直接在阿里云上的控制台里进行压测操作。</p>
</li>
<li>
<p>兼容JMeter脚本，可以平滑复用jmx脚本文件</p>
<p>除了使用阿里云自研的压测引擎外，还可以使用原生JMeter引擎进行压测，直接导入jmx脚本文件即可。有个需要注意的地方是<strong>JMeter压测功能和PTS原生功能共享并发用户数的额度</strong>。</p>
</li>
<li>
<p>配置界面所见即所得，对新手友好</p>
<p>从配置场景，发起测试，到最后的查看结果报告，几乎所有步骤都可以都可以在网页上进行（除非你要使用jmx脚本）；并且在配置场景时，用户可以直接零编码在PTS上进行场景的可视化编排。</p>
</li>
<li>
<p>覆盖主流浏览器的录制插件</p>
<p>用户可以在浏览器上模拟压测场景的操作，浏览器中的插件会录制下压测请求URL（包括Header、Body等信息），录制后的内容可以导出为YAML脚本或者JSON脚本。</p>
</li>
</ol>
<p><strong>以下是与JMeter相对比的情况：</strong></p>
<ul>
<li>
<p>是否适合新手使用</p>
<p>适合。</p>
<p>由于PTS的所有操作都可以在网页上进行，用户可以直观地配置各类设置，网站上的文档也介绍得十分清晰，所以很多并不熟悉压测是什么的新手用户也可以轻松使用PTS；但是如果要使用JMeter，新手用户还需要学会如何编写脚本，如何设置参数，如何查看结果等操作。</p>
</li>
<li>
<p>UI操作界面是否符合用户使用习惯</p>
<p>以我的个人感受来说，是。</p>
<p>评判标准是①没有会令用户产生歧义的地方，②常用的按钮都在用户习惯的位置（比如说保存按钮固定在页面的最下方等），③当鼠标移到部分按钮上时，会以浮窗的方式提示用户此操作会产生的结果，如下图</p>
<p>![image-20210219144023684](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219144023684.png)</p>
</li>
<li>
<p>压测部分的功能是否齐全，足够满足用户的各种需求</p>
<p>是。</p>
<p>以下是对PTS和JMeter的一个功能对比。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:center">性能测试PTS</th>
<th style="text-align:center">JMeter</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">自定义API</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">设置出参</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">配置检查点</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">使用函数/文件参数/自定义参数</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">添加思考时间</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">添加集合点</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">添加条件跳转</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">添加数据指令</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">使用模版配置压测场景</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:left">查看离线报告</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">容量预估</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:left">压力预估</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:left">创建SLA</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:left">压测调速</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:left">定时压测</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">脚本录制</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:left">支持的脚本</td>
<td style="text-align:center">jmx、json、yaml</td>
<td style="text-align:center">jmx</td>
</tr>
</tbody>
</table>
<p>​	从表格中我们可以看到，其实PTS的大部分功能用JMeter都可以实现，但是在JMeter上使用这些功能时对新手不太友好，而PTS就非常直观地把这些功能都做成了网页上的选项，用户只需要鼠标轻点就可以轻松使用。</p>
<ul>
<li>
<p>结果分析的报告是否全面</p>
<p>是。</p>
<p>PTS的一大优点是压测报告中的指标非常详细，排版清楚，方便用户阅读；并且有一些grafana上没有的功能，如下：</p>
<ol>
<li>
<p>PTS会统计每个请求所返回的响应码，并给出每个时间点的统计结果![image-20210219165158993](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219165158993.png)</p>
</li>
<li>
<p>PTS会统计所有返回的错误信息![image-20210219165406640](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219165406640.png)</p>
</li>
</ol>
<p>其他没有提及的大部分功能，grafana上也有，但是不太直观；如PTS和grafana都有调整时间轴更好地分析某一时间段具体的数据的功能，只是grafana上的拉取与缩放时间轴并不太方便。</p>
</li>
<li>
<p>社区建设是否丰富</p>
<p>是。</p>
<p>PTS官方网站上的文档已经十分详细，并且网络上有许多关于PTS使用心得的博客，总体来说资源非常多。JMeter的文档是英文的，虽然国内有人对其进行了翻译，但是对英文不好的用户来说还是需要多费一些功夫；但是网上也有许多JMeter相关的文章，只是找资料的时候需要多多挖掘。</p>
</li>
</ul>
<h2 id="云性能测试服务cpts华为云">云性能测试服务CPTS（华为云）</h2>
<p>一项为基于HTTP/HTTPS/TCP/UDP等协议构建的云应用提供性能测试的分布式压测服务。与上文提到的PTS相似，CPTS同样支持快速模拟大规模并发用户的真实业务高峰场景，也可以很好地支持报文内容和时序自定义、多事务组合的复杂场景测试。它所宣传的特点有：</p>
<ol>
<li>
<p>低成本的超高并发模拟</p>
<p>可以利用单压测机实现万级并发。</p>
</li>
<li>
<p>测试任务模型自定义</p>
<p>CPTS引入了“事务”的概念，和PTS中的“串联链路”有一些相似——用户可以定义自己的事务库，并且用户所创建的事务可以被多个测试任务复用，同时每个事务还可以定义多个测试阶段，最大程度地模拟流量起伏的复杂场景。</p>
</li>
<li>
<p>压测资源管理，按需使用</p>
<p>与PTS中压测集群由控制中心统一调度的情况不同，CPTS支持用户按需创建测试集群，并实现租户间流量隔离。另外在测试期间用户也可以实施扩容、缩容测试集群，升级测试能力等等。</p>
</li>
</ol>
<p><strong>以下是与JMeter相对比的情况：</strong></p>
<ul>
<li>
<p>是否适合新手使用</p>
<p>比较适合。</p>
<p>CPTS和PTS的操作界面有一些相似，操作逻辑也差不多，但是PTS的文档要比CPTS的文档更细致，也对新手更友好。CPTS中有些概念很容易让用户混淆，如“事务”、“用例”与“请求”，文档上也没有详细介绍。新手用户自己摸索着也可以摸索出使用方法，但是要费些功夫。</p>
</li>
<li>
<p>UI操作界面是否符合用户使用习惯</p>
<p>以我的个人感受来说，符合。</p>
<p>和PTS相似，在操作上没有什么会令用户产生疑问或歧义的地方。</p>
</li>
<li>
<p>压测部分的功能是否齐全，足够满足用户的各种需求</p>
<p>CPTS的功能比较齐全，以下是对CPTS和JMeter的一个功能对比。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>功能</th>
<th style="text-align:center">云性能测试服务CPTS</th>
<th style="text-align:center">JMeter</th>
</tr>
</thead>
<tbody>
<tr>
<td>自定义API</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>设置出参</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>配置检查点</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>使用函数/文件参数/自定义参数</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>添加思考时间</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>添加集合点</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>添加条件跳转</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>添加数据指令</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>使用模版创建压测场景</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td>查看离线报告</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>容量预估</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td>压力预估</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td>创建SLA</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td>压测调速</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td>定时压测</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>脚本录制</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>绑定域名</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>支持原生JMeter压测</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td>支持的脚本</td>
<td style="text-align:center">jmx、json、swagger</td>
<td style="text-align:center">jmx</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>结果分析的报告是否全面</p>
<p>是。</p>
<p>CPTS的报告也比较详细，同时UI界面也非常舒服。有一些功能和PTS类似，算是各有千秋。特色功能如下：</p>
<ol>
<li>
<p>CPTS也会统计每个异常的响应信息并直观地展现出来</p>
<p>![image-20210219170048075](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219170048075.png)</p>
</li>
<li>
<p>CPTS上的响应状态分布图比grafana多了更多数据</p>
<p>![image-20210219170200880](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219170200880.png)</p>
</li>
</ol>
</li>
<li>
<p>社区建设是否丰富</p>
<p>不太丰富。</p>
<p>首先，CPTS的官方网站内容不是很多；其次，网上也没有几篇关于使用CPTS的文章（除了官方自己发的以外）。</p>
<p>![image-20210219161538578](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219161538578.png)![image-20210219161623048](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219161623048.png)</p>
<p>如上图，可以看出JMeter的网络资源明显更加丰富，在这点上JMeter对用户更加友好。</p>
</li>
</ul>
<h2 id="其他类的压测平台">其他类的压测平台</h2>
<p>市场上还有部分压测平台并不像PTS和CPTS那样同时面向个人用户和企业用户，它们一般只为企业用户服务，所以我单独把它们列了出来。</p>
<ol>
<li>
<p>WeTest压测大师</p>
<p>压测大师的优势主要有</p>
<ul>
<li>依靠腾讯云提供压力源，并不需要额外配置压力机，同时云端压力稳定无上限</li>
<li>有腾讯专家在线指导并且会定期开展性能测试培训或沙龙等</li>
</ul>
<p>但是压测大师的官网上并没有提供体验入口，所以无从得知其服务细节（只能评价一下官网页面做得挺好看的）。</p>
<figure data-type="image" tabindex="1"><img src="/Users/nanagan/Desktop/111.png" alt="111" loading="lazy"></figure>
<p>如果点击【联系客服】，则会转到网页咨询窗口，并提供人工客服选项，联系官方还是比较方便的。</p>
</li>
<li>
<p>全链路压测ForceCop</p>
<p>ForceCop主打<strong>业务零侵入</strong>、<strong>多语言支持</strong>、<strong>立体监控</strong>等特点，主要的压测功能都有具备，并且附上了客户案例。</p>
<p>但是如果想要体验ForceCop的服务，需要填写申请表。</p>
<p>![image-20210219172400014](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219172400014.png)</p>
</li>
<li>
<p>压测宝</p>
<p>压测宝的官网上信息就没有那么丰富了，只大概提了一下产品的特点，在客户案例部分阐述得比较多，但也没有看出产品的优势具体在什么地方。想要体验服务同样需要申请。</p>
<p>![image-20210219172859797](/Users/nanagan/Library/Application Support/typora-user-images/image-20210219172859797.png)</p>
</li>
<li>
<p>云压力测试平台 CPT</p>
<p>CPT是睿象云公司的产品，该公司的主要业务其实是提供高效智能的跨云监控和告警管理服务，云压测服务并不是它们主推的功能。其实个人也可以体验它们的服务，但是由于想说的内容比较少，于是把它放在最后。在体验过程中我有以下几点感受：</p>
<ul>
<li>UI界面对用户不太友好</li>
<li>“测试任务”部分操作比较简单，但是“编写脚本”部分很让人费解</li>
<li>与上文的CPTS和PTS相比，没有很特色的功能，用JMeter可以完全替代</li>
<li>压测时可以选择流量所在地域（虽然只有三个选项）</li>
</ul>
<p>不过它的文档还算详细，在搜索引擎上也能找到挺多相关文章的（要比CPTS多），算是它的一个优点。</p>
</li>
</ol>
<h2 id="总结">总结</h2>
<p>总的来说，衡量一个压测平台的指标大概有以下几项：</p>
<ul>
<li>学习成本</li>
<li>安装部署成本</li>
<li>是否免费</li>
<li>是否支持多协议</li>
<li>压测结果图形化展示</li>
<li>是否支持TPS模式</li>
<li>是否有链路、场景编排管理支持</li>
<li>是否支持场景录制</li>
<li>生态环境</li>
<li>监控指标是否完备</li>
<li>是否支持原生</li>
<li>是否支持流量地域定制</li>
</ul>
<p>JMeter的优势在于<strong>免费</strong>、学习成本低、拥有绝大部分用户所需要的功能、生态环境良好等；其他云压测平台主要的优点有<strong>操作简单</strong>、<strong>功能强大</strong>等，但是一般收费都比较昂贵。</p>
<p>从以上的多个平台的分析中，JMeter可以有哪方面的改进：</p>
<ol>
<li>在JMeter上编写脚本虽然并不是太难，但是如果简化了这一过程则可以大大减少用户的学习成本，可以吸引更多新用户。</li>
<li>在结果分析报告部分，JMeter可以增加一些对响应数据的分析，使用户可以直观地找出返回了什么错误的响应代码，更快速地处理问题</li>
<li>grafana有很多功能，但是它的界面是全英文的，有些用户会面临着一边抱着字典一边用grafana一边摸不清grafana要如何实现自己需求的窘境</li>
<li>使用JMeter时，编写脚本在JMeter客户端上、压测在服务器上、查看结果在网页上。这整个压测过程比较割裂，如果可以整合在一起也比较方便用户</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Mac上利用压测工具Jmeter-Suite进行一次压测实践的保姆级详细步骤（参考腾讯云文章）]]></title>
        <id>https://nanagan.github.io/post/jmeter-test/</id>
        <link href="https://nanagan.github.io/post/jmeter-test/">
        </link>
        <updated>2021-02-20T20:26:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="参考的文章">参考的文章</h2>
<p><a href="https://cloud.tencent.com/developer/article/1776927">压测工具Jmeter-Suite详细操作步骤</a></p>
<h2 id="写此文的目的">写此文的目的</h2>
<p>由于我是刚开始接触kubernetes和jmeter，所以在学习过程中遇到了很多很多问题，同时我很烦恼为什么网上没有文章是从真正<strong>零基础</strong>地记录部署的过程，比如安装brew和helm3之类的步骤都被省略了，像我这种菜菜就很抓瞎。所以在我终于摸到了kubernetes世界的大门、碰到了压测的边边后，我决定写一篇文章回馈菜菜们。</p>
<h2 id="需要的背景知识">需要的背景知识</h2>
<ul>
<li>阅读《kubernetes权威指南》第一章  （不读也行，就是要了解kubernetes的基本概念，我个人觉得这本书写得不错）</li>
<li>阅读 <a href="https://www.zhihu.com/column/p/26729512">JMeter介绍</a>   （了解jmeter的作用）</li>
</ul>
<h2 id="我的系统">我的系统</h2>
<figure data-type="image" tabindex="1"><img src="https://ask.qcloudimg.com/developer-images/article/5055839/orhbxk47be.png?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<h2 id="详细步骤">详细步骤</h2>
<p>省略购买压测机器部分的内容，直接跳到<strong>压测工具安装</strong>部分开始 。</p>
<h3 id="1-安装brew">1 安装brew</h3>
<blockquote>
<p>brew是一个mac上面很好用的软件管理系统，可以简化mac上的安装过程。</p>
</blockquote>
<p>我用了一个知乎专栏上的自动化脚本，链接是<a href="https://zhuanlan.zhihu.com/p/111014448">Homebrew国内如何自动安装（国内地址）</a> ，真诚表白作者，原本下载速度很慢的，现在下载速度飞升 T^T<br>
ps安装期间我遇到了各种问题，因为我原本的mac系统很低，安装了低版本的brew，不知道啥原因死活装不上新版本，我干脆重新装了个机，重新安装，就非常顺利</p>
<h3 id="2-安装wget">2 安装wget</h3>
<blockquote>
<p>Linux系统上一个下载文件的工具。</p>
</blockquote>
<p>其实我感觉它的功能和brew挺像的，但由于我参考的文章里用了wget那我就用吧（）<br>
用<code>brew install wget</code>命令，我在这一步很顺利，省略之 。</p>
<h3 id="3-安装helm">3 安装helm</h3>
<blockquote>
<p>Helm 是Deis 开发的一个用于Kubernetes 应用的包管理工具，主要用来管理Charts。<br>
chart 是描述相关的一组Kubernetes资源的文件集合。单个chart可能用于部署简单的东西，比如memcached pod，或者一些复杂的东西，比如完整的具有HTTP 服务，数据库，缓存等的Web 应用程序堆栈。chart通过创建为特定目录树的文件，将它们打包到版本化的压缩包，然后进行部署。</p>
</blockquote>
<p>按照文档上的操作，我在运行完</p>
<pre><code>wget https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz 
tar -zxvf helm-v3.2.1-linux-amd64.tar.gz 
cp linux-amd64/helm /usr/local/bin/
</code></pre>
<p>后，出现了<code>zsh: exec format error: helm</code>的报错 ，简单搜索了一下，似乎是无法解析文件？于是我又重新进行安装helm的操作，也就是运行<code>brew install kubernetes-helm</code>，又出现了错误。</p>
<pre><code>Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local
Could not symlink bin/helm
Target /usr/local/bin/helm
already exists. You may want to remove it:
  rm '/usr/local/bin/helm'
</code></pre>
<p>原因似乎是之前已经装了一次helm，文件重复了<br>
于是我按照提示，运行</p>
<pre><code>rm '/usr/local/bin/helm'
brew link helm
brew install kubernetes-helm
</code></pre>
<p>安装helm的过程到此结束。</p>
<h3 id="4-安装kubectl">4 安装kubectl</h3>
<blockquote>
<p>kubectl是Kubernetes 命令行工具，使得你可以对 Kubernetes 集群运行命令。 你可以使用 kubectl 来部署应用、监测和管理集群资源以及查看日志。</p>
</blockquote>
<p>由于前面我们已经安装了brew，所以可以直接运行<code>brew install kubectl</code> 。<br>
再运行<code>kubectl version</code>来确定是否安装成功，当出现类似于</p>
<pre><code>Client Version: version.Info{Major:&quot;1&quot;, Minor:&quot;20&quot;, GitVersion:&quot;v1.20.2&quot;, GitCommit:&quot;faecb196815e248d3ecfb03c680a4507229c2a56&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2021-01-14T05:14:17Z&quot;, GoVersion:&quot;go1.15.6&quot;, Compiler:&quot;gc&quot;, Platform:&quot;darwin/amd64&quot;}
Server Version: version.Info{Major:&quot;1&quot;, Minor:&quot;18+&quot;, GitVersion:&quot;v1.18.4-tke.3&quot;, GitCommit:&quot;f8797eb035aca9c928af02ea9a74d232cfd41bc6&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-10-12T03:32:01Z&quot;, GoVersion:&quot;go1.14.8&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;}
</code></pre>
<p>的代码时说明已经安装成功啦。</p>
<h3 id="5-部署压测集群">5 部署压测集群</h3>
<p>接着按照文章的内容，运行</p>
<pre><code>git clone https://github.com/tkestack/charts.git
cd charts/
helm install your-name incubator/jmeter-suite  （这里的your-name请更改为自己给服务取的名字）
</code></pre>
<p>然后出现报错</p>
<pre><code>Error: Kubernetes cluster unreachable: 
Get &quot;http://localhost:8080/version?timeout=32s&quot;: dial tcp 127.0.0.1:8080: connect: connection refused
</code></pre>
<p>这里要配置环境变量KUBECONFIG，需要运行<code>export KUBECONFIG=集群配置文件的路径</code>，但这个配置是一次性的，终端窗口一关闭或者新开一个终端窗口 就需要重新配置，如果需要更改全局的环境变量需要更改<code>~/.bash_profile</code>文件。</p>
<p>然后解决完上面这个报错后，再重新运行<code>helm install your-name incubator/jmeter-suite</code> ，随后又出现了报错</p>
<pre><code>Error: rendered manifests contain a resource that already exists. 
Unable to continue with install: ServiceAccount &quot;jmeter-influxdb&quot; in namespace &quot;default&quot; exists and cannot be imported into the current release: invalid ownership metadata; 
annotation validation error: missing key &quot;meta.helm.sh/release-name&quot;: must be set to &quot;test&quot;; annotation validation error: missing key &quot;meta.helm.sh/release-namespace&quot;: must be set to &quot;default&quot;
</code></pre>
<p>呃大概意思就是本地 已经有了一个namespace为default的jmeter了，解决这个错误挺简单</p>
<ul>
<li>1 运行<code>helm list --all --all-namespaces</code>，查看系统里所有的releases。</li>
<li>2 运行 <code>helm uninstall jmeter -n default</code>，卸载这个namespace为default的jmeter。</li>
</ul>
<p>随后便可以安装jmeter了，重新运行<code>helm install your-name incubator/jmeter-suite</code> ，这次成功了，随后出现</p>
<pre><code>NAME: test
LAST DEPLOYED: Wed Jan 27 17:18:21 2021
NAMESPACE: default
STATUS: deployed
REVISION: 1
</code></pre>
<h3 id="6-编写脚本">6 编写脚本</h3>
<h4 id="打开jmeter工具">打开jmeter工具</h4>
<p>在<a href="http://jmeter.apache.org/download_jmeter.cgi">Jmeter官网</a>下载好jmeter，我下载的是如图的黑色字体版本。<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/22akf6afqg.png?imageView2/2/w/1620" alt="" loading="lazy"></p>
<p>接着我双击/bin目录下的ApacheJMeter.jar文件，打不开。就算把电脑的那个安全性提醒关掉也打不开，好吧，运行下面的命令强制打开<br>
<code>java -jar /Users/chrystal/Documents/apache-jmeter-5.4.1\ 2/bin/ApacheJMeter.jar (请把后面的路径改为自己存放文件的路径)</code><br>
此时命令行如下图<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/79olj1o5tr.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
这说明！不能用这个窗口来跑测试脚本！所以我们要新开一个终端窗口进行后面的操作。<strong>新开的终端窗口记得配置kubernetes环境变量。</strong></p>
<p>该jar包打开的界面如下<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/oopsoma8rb.png?imageView2/2/w/1620" alt="" loading="lazy"></p>
<p>可以把原文章中提到的demo测试脚本用它打开，如图<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/gwuzmrgkd5.png?imageView2/2/w/1620" alt="" loading="lazy"></p>
<p>接下来参考demo脚本写一个自己的脚本，具体的基础设置解释在原文章里有。那么测试一下<a href="https://home.cnblogs.com/blog/">博客园</a>的接口吧。</p>
<h4 id="设置脚本">设置脚本</h4>
<p>在jmeter处新建个文件，添加线程组<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/r33vipozz.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
下面红框处是我更改后的配置，重要的是我设置了5000个线程，循环2次。*<em>（<em>我后来改了，因为线程组太多了，测试停不下来，改成了50x200）</em></em><br>
<img src="https://ask.qcloudimg.com/http-save/5055839/1ek8an75fv.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
右键线程组，添加http请求，并设置IP地址。<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/41ypup5nb4.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
<img src="https://ask.qcloudimg.com/http-save/5055839/hdz1bkykc5.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
到这里我们基本配置好了线程组的内容，也就是说我们在这次测试中会向博客园发送10000个http请求来测试它的承受能力，但是我们还需要对返回的结果进行分析，所以还要再添加一些监听器来处理结果。</p>
<ul>
<li>添加后端监听器<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/4np76xx6x2.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
对其进行简单设置<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/odc12an75x.png?imageView2/2/w/1620" alt="" loading="lazy"></li>
<li>添加察看结果树<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/lx548y05r7.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
自己喜欢啥就添加啥吧，我感觉作用都差不多，在这里我添加了<strong>察看结果树</strong>和<strong>汇总图</strong>。</li>
</ul>
<p>配置完所有东西后，我们运行一下脚本看看有无错误。<br>
果然有错误啊，我的人生果然不会这么一帆风顺啊（）运行一会儿很快就退出了，点击察看结果树出来的全是错误，<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/2f5ujldbnn.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
然后点击响应数据去查看返回了啥错误<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/k9ikyb964r.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
这里说请求的host的格式错误。经过我的一番研究，原来我在上面的设置IP地址时直接复制了博客园的主页，包含了特殊符号。也就是说具体的路径不能写在服务器IP地址那里，正确写法应该是这样<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/e804r18ivc.png?imageView2/2/w/1620" alt="" loading="lazy"><br>
改完以后再运行，就非常顺利，如图<br>
<img src="https://ask.qcloudimg.com/http-save/5055839/yvrz6yxxt0.png?imageView2/2/w/1620" alt="" loading="lazy"></p>
<p>脚本编写到此完成！</p>
<h3 id="7-发起测试">7 发起测试</h3>
<p>运行<code>kubectl get pods</code>确认一下有没有连接到kubernetes集群，出现了类似于</p>
<pre><code>NAME                                              READY   STATUS    RESTARTS   AGE
jmeter-influxdb-0                                 1/1     Running   0          23h
test-distributed-jmeter-master-77749c5845-89c6w   1/1     Running   0          23h
test-distributed-jmeter-server-5556bbf5fc-2hxvg   1/1     Running   0          23h
test-distributed-jmeter-server-5556bbf5fc-fztws   1/1     Running   0          23h
test-distributed-jmeter-server-5556bbf5fc-lmsdw   1/1     Running   0          23h
test-grafana-584875d9d4-zsfzz                     1/1     Running   0          23h
</code></pre>
<p>的内容就是连接成功了。<br>
然后运行<code>sh start_test.sh 你的文件目录</code>，就可以在集群上进行测试了。</p>
<h3 id="8-查看结果">8 查看结果</h3>
<p>运行完成以后终端窗口会出现</p>
<pre><code>Creating summariser &lt;summary&gt;
Created the tree successfully using /jmeter/test2.jmx
Configuring remote engine: 192.168.0.131
Configuring remote engine: 192.168.0.189
Configuring remote engine: 192.168.0.134
Starting distributed test with remote engines: [192.168.0.189, 192.168.0.134, 192.168.0.131] @ Thu Jan 28 09:16:07 UTC 2021 (1611825367766)
Remote engines have been started:[192.168.0.189, 192.168.0.134, 192.168.0.131]
Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445
summary +   3104 in 00:00:22 =  143.4/s Avg:   598 Min:    40 Max: 16565 Err:     6 (0.19%) Active: 150 Started: 150 Finished: 0
summary +   4400 in 00:00:30 =  146.3/s Avg:   772 Min:    41 Max: 32547 Err:     4 (0.09%) Active: 150 Started: 150 Finished: 0
summary =   7504 in 00:00:52 =  145.1/s Avg:   700 Min:    40 Max: 32547 Err:    10 (0.13%)
summary +   4600 in 00:00:31 =  150.6/s Avg:   854 Min:    40 Max: 64926 Err:     7 (0.15%) Active: 149 Started: 150 Finished: 1
summary =  12104 in 00:01:22 =  147.1/s Avg:   759 Min:    40 Max: 64926 Err:    17 (0.14%)
summary +   4400 in 00:00:30 =  149.0/s Avg:   742 Min:    42 Max: 68044 Err:     2 (0.05%) Active: 132 Started: 150 Finished: 18
summary =  16504 in 00:01:52 =  147.6/s Avg:   754 Min:    40 Max: 68044 Err:    19 (0.12%)
summary +   4500 in 00:00:30 =  150.5/s Avg:  1100 Min:    42 Max: 131100 Err:    13 (0.29%) Active: 98 Started: 150 Finished: 52
summary =  21004 in 00:02:22 =  148.2/s Avg:   828 Min:    40 Max: 131100 Err:    32 (0.15%)
summary +   4600 in 00:00:30 =  153.0/s Avg:   801 Min:    41 Max: 130543 Err:    11 (0.24%) Active: 51 Started: 150 Finished: 99
summary =  25604 in 00:02:52 =  149.1/s Avg:   823 Min:    40 Max: 131100 Err:    43 (0.17%)
summary +   4396 in 00:01:12 =   61.0/s Avg:   438 Min:    40 Max: 131063 Err:     7 (0.16%) Active: 0 Started: 150 Finished: 150
summary =  30000 in 00:04:04 =  123.0/s Avg:   767 Min:    40 Max: 131100 Err:    50 (0.17%)
Tidying up remote @ Thu Jan 28 09:20:12 UTC 2021 (1611825612504)
... end of run
</code></pre>
<p>然后原文章很详细地写了如何查看结果，这里省略。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新手必读】关于压力测试不得不说的二三事]]></title>
        <id>https://nanagan.github.io/post/stress-testing/</id>
        <link href="https://nanagan.github.io/post/stress-testing/">
        </link>
        <updated>2021-02-20T18:49:45.000Z</updated>
        <content type="html"><![CDATA[<p>注：本文并不百分百是原创，参考资料已经列在文章最下方。</p>
<h2 id="本文的目标读者">本文的目标读者</h2>
<p>对压力测试一无所知、但需要了解比较系统的压测知识的新手人群。</p>
<h2 id="本文大纲内容">本文大纲内容</h2>
<ol>
<li>压力测试相关的基础概念</li>
<li>常用压测工具的基本了解</li>
<li>了解压测的基本流程</li>
</ol>
<h2 id="相关的基础概念">相关的基础概念</h2>
<h3 id="软件测试的分类">软件测试的分类</h3>
<p>软件测试如果按照<strong>是否查看代码</strong>分类，则可分为<strong>白盒测试</strong>、<strong>黑盒测试</strong>以及<strong>灰盒测试</strong>三类，其中黑盒测试又可分为<strong>功能测试</strong>与<strong>性能测试</strong>。我们这里主要探讨性能测试中的压力测试，而性能测试的具体分类如下：</p>
<ul>
<li>基准测试：给系统施加较低压力，查看系统的运行状况并记录相关数据作为基础参考。</li>
<li>负载测试：对系统不断增加压力或增加在一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值（例如某种资源已经达到饱和状态）。</li>
<li><strong>压力测试</strong>：评估系统处于或超过预期负载时系统的运行情况，关注点在于系统在峰值负载或超出最大载荷情况下的处理能力。</li>
<li>稳定性测试：给系统加载一定业务压力，使系统运行一段时间，以此监测系统运行是否稳定。</li>
<li>并发测试：测试多个用户同时访问同一个应用、同一个模块或者数据记录时是否存在死锁或其它性能问题。</li>
</ul>
<blockquote>
<p><strong>负载测试与压力测试的区别：</strong></p>
<p>在负载测试中需要不断变化系统的负载，以测试系统在不同负载下的性能表现；在压力测试中则是让系统在极高的负载下测试系统的运行情况。</p>
</blockquote>
<h3 id="为什么要进行压力测试">为什么要进行压力测试？</h3>
<p>压测一般用于新系统上线支持、技术升级验证、业务峰值稳定性保障、站点容量规划以及性能瓶颈探测等。</p>
<ul>
<li><strong>新系统上线支持</strong><br>
在新系统上线前，通过执行性能压测能够对系统的负载能力有较为清晰的认知，从而结合预估的潜在用户数量保障系统上线后的用户体验。</li>
<li><strong>技术升级验证</strong><br>
在系统重构过程中，通过性能压测验证对比，可以有效验证新技术的高效性，指导系统重构。</li>
<li><strong>业务峰值稳定性保障</strong><br>
在业务峰值到来前，通过充分的性能压测，确保大促活动等峰值业务稳定性，保障峰值业务不受损。</li>
<li><strong>站点容量规划</strong><br>
通过性能压测实现对站点精细化的容量规划，指导分布式系统机器资源分配。</li>
<li><strong>性能瓶颈探测</strong><br>
通过性能压测探测系统中的性能瓶颈点，进行针对性优化，从而提升系统性能。</li>
</ul>
<p>同时，压力测试也可以发现其他测试更难发现的错误，如<strong>内存泄漏</strong>、<strong>并发与同步</strong>。举个例子，2012年11月11日零点，阿里各种系统报错、立刻下单报错、购物车支付报错、支付系统报错、购物车的东西丢失，系统显示交易成功率不到50%，产生了大量超卖，给阿里带来很大的损失。这是因为错误预估了可能会达到的流量，没有明晰整个购物链路上每个系统的承受能力，也没有完善的预案，说明了压测的重要性。</p>
<h3 id="压力测试的对象">压力测试的对象</h3>
<p>我们可以对各种服务对象进行压力测试，例如接口、系统、后台服务等。</p>
<blockquote>
<p><strong>接口测试</strong>是测试系统组件间接口的测试，主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点；测试原理是通过测试程序模拟客户端向服务器发送请求报文，服务器接收并处理报文然后发送应答报文，客户端再接收服务器相应发出的应答报文这一过程。</p>
</blockquote>
<p><strong>实现接口测试的方法</strong></p>
<ul>
<li>使用接口测试工具：apipost、jmeter、loadrunner。</li>
<li>通过脚本进行接口测试，一般使用python编写脚本。</li>
</ul>
<h3 id="压力测试的特点">压力测试的特点</h3>
<ol>
<li>这种性能测试方法的主要目的是检查系统处于压力性能下时应用的表现。</li>
<li>这种性能测试一般通过模拟负载等方法，使得系统的资源使用达到较高的水平。</li>
<li>这种性能测试方法一般用于测试系统的稳定性。 也就是说，这种测试是让系统处在很大强度的压力之下，看系统是否稳定，哪里会出问题。</li>
</ol>
<h3 id="压力测试的作用">压力测试的作用</h3>
<ul>
<li>如果是新服务，无预估目标，则需要通过压测得到服务基准数据，或找到系统瓶颈进行优化；</li>
<li>如果有明确的压测目标，则需要通过压测确定服务的各项指标是否达标；</li>
<li>如果是常态化压测，则为后期性能优化指导方向或者提供参考依据。</li>
</ul>
<h3 id="压力测试的类型">压力测试的类型</h3>
<ul>
<li>
<p>单机压力测试</p>
</li>
<li>
<p>分布式压力测试</p>
<p>一般当需要测试大量并发，一台机器满足不了需求时会采用分布式压力测试。通俗解释就是由一台中控机（master）去调度其他多台机器（slave）执行对目标对象（target）的测试脚本，然后返回测试结果给中控机（master）。</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/wz2cool/markdownPhotos/master/res/jmeter_distribution.png" alt="jmeter_distribution" loading="lazy"></figure>
<h3 id="压测常用的性能指标">压测常用的性能指标</h3>
<ul>
<li>
<p><strong>每秒处理事务（TPS，Transaction Per Second）</strong> 每秒系统处理事务（通过、失败以及停止）的数量。通过它可以确定系统在任何给定时刻的时间事务负载。</p>
</li>
<li>
<p><strong>每秒查询率（QPS，Queries Per Second）</strong> 一台服务器每秒能够响应的查询次数。通过它可以确定系统的最大吞吐能力。</p>
</li>
<li>
<p><strong>并发用户数（Number of Concurrent Users）</strong> 同一时间点请求服务器的用户数。</p>
<ul>
<li><strong>最佳并发用户数（The Optimum Number of Concurrent Users）</strong> 随着并发量的增加，吞吐量（每秒处理事务）不再相应增加，并且响应时间继续增长。</li>
</ul>
</li>
<li>
<p><strong>事务平均响应时间（Average Transaction Response Time）</strong> 每一事务执行所用的平均时间，通过它可以分析测试场景运行期间应用系统的性能走向。</p>
<ul>
<li>
<p><strong>最大响应时间（Max Response Time）</strong> 指用户发出请求或者指令到系统做出反应（响应）的最大时间。</p>
</li>
<li>
<p><strong>最少响应时间（Mininum ResponseTime）</strong> 指用户发出请求或者指令到系统做出反应（响应）的最少时间。</p>
</li>
<li>
<p><strong>90%响应时间（90% Response Time）</strong> 是指所有用户的响应时间进行排序，第90%的响应时间。</p>
</li>
</ul>
</li>
<li>
<p><strong>CPU（CentralProcessing Unit）</strong> 中央处理器，是计算机的重要设备之一。功能主要是解释计算机指令以及处理计算机软件中的数据。</p>
<ul>
<li><strong>CPU利用率（CPU Usage）</strong> CPU利用率分为用户态，系统态和空闲态，分别表示CPU处于用户态执行的时间，系统内核执行的时间，和空闲系统进程执行的时间。平时所说的CPU利用率是指：CPU执行非系统空闲进程的时间/CPU总的执行时间。</li>
</ul>
</li>
<li>
<p><strong>内存（Memory）</strong> 也被称为内存储器，其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。</p>
<ul>
<li><strong>内存使用率（Memory usage）</strong> 内存占用率指的是此进程所开销的内存。</li>
</ul>
</li>
<li>
<p><strong>磁盘IO（Disk input/ output）</strong> 磁盘的读写包速率。</p>
</li>
<li>
<p><strong>网卡负载（Network Load）</strong> 网卡的进出带宽，包量。</p>
</li>
</ul>
<h2 id="压测工具介绍">压测工具介绍</h2>
<ol>
<li>
<p>ab</p>
<figure data-type="image" tabindex="2"><img src="https://ask.qcloudimg.com/http-save/5055839/4lytuzvi5m.png?imageView2/2/w/1620" alt="_1" loading="lazy"></figure>
<p>ab（Apache Benchmark）是Apache公司提供的一款简单易上手的测试工具，一般用于测试web服务。它是一个命令行工具，对<strong>发起负载的本机要求很低</strong>，不会占用很多CPU或内存，<strong>但是会可能给目标服务器造成巨大的负载</strong>，其原理类似于<code>CC攻击</code>。它适用于本地对支持HTTP协议的单一地址进行性能压测。</p>
<blockquote>
<p>CC攻击（Challenge Collapsar）是针对web服务器或应用程序的攻击。原理是通过代理服务器或者大量肉鸡模拟多个用户访问目标网站的动态页面，制造大量的后台数据库查询动作，消耗目标CPU资源，造成拒绝服务。CC攻击的请求本身是正常的请求。</p>
</blockquote>
<p>它可以根据命令创建很多并发访问线程，模拟多个访问者同时对某一个URL地址进行访问，以此测试目标服务器的负载压力。</p>
<p>它的扩展性比较低，用来测试post get接口请求非常便捷，但<strong>只能提供基本性能指标，没有图形化结果，无法监控。</strong></p>
</li>
<li>
<p>LoadRunner</p>
<figure data-type="image" tabindex="3"><img src="https://ask.qcloudimg.com/http-save/5055839/kagak4sy5t.png?imageView2/2/w/1620" alt="_2" loading="lazy"></figure>
<p>LoadRunner是HP公司提供的一款预测系统行为和性能的工业标准级测试工具，通过模拟成千上万个用户实施并发操作，测试系统的性能，并且提供详细的测试结果分析，协助用户查找问题。</p>
<p>它的工作原理是用虚拟用户脚本生成器用代理方式接收客户端发送的数据包进行处理并转发给服务器端，再接收从服务器端返回的数据流进行处理并返回客户端，通过这种方式来模拟真实运行环境；在整个过程中实时监控采集控制台上的所有资源并捕获性能数据，最后将结果存储在数据库的储存库中。</p>
<p>它基本包括了JMeter的常用功能，<strong>支持IP欺骗</strong>，优点是专业、稳定、高效，缺点是非开源免费，<strong>售价高</strong>，扩展性比较差。</p>
<blockquote>
<p>IP欺骗是指利用带有假的源IP地址的IP协议分组来冒充另一个计算机系统身份，使发送方可以保持匿名的技术。在压力测试中，如果某一个IP访问过于频繁或者访问量过大时，服务器会拒绝访问请求，此时可以通过IP欺骗增加访问频率和访问量；还有某些服务器配置了负载均衡，使用同一个IP无法测出系统的实际性能；又或是一些网站会限制IP登录等等，为了真实模拟现实情况，都需要用到IP欺骗。</p>
</blockquote>
</li>
<li>
<p>JMeter</p>
<figure data-type="image" tabindex="4"><img src="https://ask.qcloudimg.com/http-save/5055839/jui6fiyqzb.png?imageView2/2/w/1620" alt="_3" loading="lazy"></figure>
<p>JMeter是Apache公司组织开发的基于Java的测试工具，最初被设计用于web应用测试，但后来扩展到了其他测试领域。它的功能与LoadRunner比较相似，工作原理也基本一致——JMeter通过线程组来模拟真实用户对服务器的访问压力，可以作为服务器与客户端之间的代理网关以捕获请求和响应。另外，JMeter能够对应用程序做<strong>功能/回归测试</strong>，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter<strong>允许使用正则表达式创建断言</strong>。</p>
<p>它是一款<strong>开源</strong>的免费软件，具有强大的开源社区支持，社区内开发者活跃程度高。它使用了<strong>图形界面</strong>，用户可以通过图形界面来编写测试用例，操作简单易上手；并且它体积小巧，不需要安装即可使用。</p>
<p>它相比于LoadRunner的缺点是<strong>结果分析能力没有LR强</strong>，且<strong>不支持IP欺骗</strong>。并且JMeter的性能不太稳定，在高并发下观测结果集时容易遭成界面卡死或崩溃。</p>
</li>
</ol>
<p>这里只比较详细地介绍了三种最常见的压测工具，还有一些其他工具简单介绍如下：</p>
<ul>
<li>wrk：一款热门的HTTP性能测试工具，<strong>不支持Windows</strong>，支持大多数UNIX系统。只能单机测试，但是支持多线程，且可以在有限的资源下并发出极致的的负载请求。</li>
<li>hey：一款基于golang的类似于ab的轻量级压测工具，<strong>只支持http接口</strong>的压力测试。</li>
<li>k6：一种高性能的开源测试工具，可用于负载测试和性能监控。用户可使用<strong>JavaScript</strong>编写脚本。<strong>对开发人员友好</strong>，同时<strong>官方文档丰富 ，社区活跃</strong>。</li>
<li>locust：一款基于python的<strong>分布式</strong>压力测试工具，提供UI界面，一般用于网站压力测试。由于采用了<strong>协程</strong>（gevent，一种轻量级线程）机制，所以<strong>单机并发能力很强</strong>，且比 jmeter更加轻量化。</li>
<li>vegeta：一个基于golang的多功能的 HTTP 负载测试工具。它会以延时最小的方式尽可能少地建立并发连接数，所以<strong>不适合测试固定并发数下的QPS</strong>；但是它会尽全力满足你所设定的QPS，所以它是一款以<strong>压测QPS为主</strong>的工具。<strong>支持使用图表插件展示实时压测报告</strong>。</li>
</ul>
<h2 id="压测的基本流程">压测的基本流程</h2>
<ol>
<li>
<p>制定压测目标</p>
<p>可以通过<strong>历史监控数据</strong>（已经上线的服务，存在历史数据），<strong>类比</strong>（新服务/线上未监控的服务，但存在类似功能服务的历史数据）或者<strong>估算</strong>（不存在历史数据、不存在类似功能服务数据，使用<code>8/2原则</code>）去预估压测中期望服务能达到的性能预期。</p>
<blockquote>
<p>8/2原则：指一天内80%的请求会在20%的时间内到达。</p>
</blockquote>
</li>
<li>
<p>场景配置</p>
<p>在压测前应明确需要压测的场景是什么，应有压测的优先级，高优先级场景有：</p>
<ol>
<li>
<p>高频业务场景（今日头条首页下拉刷新）</p>
</li>
<li>
<p>关键业务场景，使用频率低，一旦出问题就很严重（微信账号登录）</p>
</li>
<li>
<p>性能高消耗场景（淘宝下单）</p>
</li>
<li>
<p>曾经出现过问题的场景</p>
</li>
</ol>
<p>梳理完场景后，确认压测哪些服务，可能还需要对链路上相关的业务进行改造等。</p>
</li>
<li>
<p>准备压测环境</p>
<p>部署压测环境，需要模拟用户（业务）与系统的交互。常见的方法是使用线上环境压测，在负载低的时间段发起压测。</p>
</li>
<li>
<p>压测执行</p>
<p>前期工作是根据场景设计或者文本用例编写测试脚本以及对脚本进行调优等。在压测过程中一般从细粒度开始慢慢集成到整个大系统，如<code>单接口单机-&gt;单接口1/4资源-&gt;场景化1/4资源-&gt;全量资源压测-&gt;拨测</code>。</p>
<blockquote>
<p><strong>单接口单机</strong></p>
<p>在单核（或物理资源少）机器上部署单个服务，排除外部链路、网络等因素，得出自身服务的单核性能情况（单位QPS/core），后续根据此单核性能指标结合压测目标值进行扩容。另外由于是压的单接口单机，无其他接口请求影响，上下游在足够资源的情况下也不会造成瓶颈，所以能确保服务的性能真实值。</p>
<p>单接口单机可以在正式开始大规模压测前提前发现问题，方便RD做针对的性能优化并快速检验优化效果。一部分问题会先在单接口单机压测环节中发现，而一些隐藏得更深的问题，需要延后到全链路大流量压测才能暴露。</p>
<p><strong>单接口1/4资源</strong></p>
<p>单接口单机压测环节，服务端已经完成了部分性能优化，接下来可以进入单接口1/4资源压测，这样是为了验证在单接口单机压测中得到的单核性能数据，在扩容1/4资源下性能是否会线性增长，是否存在性能损耗以及定位损耗源。</p>
<p><strong>场景化1/4资源</strong></p>
<p>单接口压测局限很明显，场景化压测由于引入了上下游服务的其他接口的因素，可以发现单接口压测无法发现的问题，更接近线上用户场景。</p>
<p><strong>全量资源全链路</strong></p>
<p>全部资源到位后，预估的线上压力是否能承受，这一步也是内网压测过程的最后一步。</p>
<p><strong>拨测</strong></p>
<p>除了做内网压测，还要进行拨测验证用户从客户端到服务端的整个带宽资源是否满足预期，内网压测已经确认了业务性能是否达标，因此拨测可以只选择了一个场景进行验证即可。（简单来说拨测相当于压测cdn，检查各地cdn节点资源是否充足）</p>
<p>来源：<a href="https://juejin.cn/post/6844904147729252366">服务端压测怎么做</a></p>
</blockquote>
</li>
<li>
<p>压测监控分析</p>
<p>确认监控体系是否完整，对服务器、系统的资源指标和系统指标进行监控，一般监控项有：<a href="#%E5%8E%8B%E6%B5%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87">压测常用的性能指标指标</a>。</p>
</li>
<li>
<p>报告总结</p>
<p>压测最终应该输出一份报告总结，其实也就是把整个压测方案、过程、结论记录下来，写明压测目标、压测接口、压测数据、压测结论，给出发现的问题并提供优化方案。往往在压测报告完成时，性能问题已经基本被解决了，报告的意义在于梳理前面的整个流程，给后续的压测提供经验指导。</p>
</li>
</ol>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://www.jianshu.com/p/816a95b5fd12">压力测试常用性能指标</a><br>
<a href="https://juejin.cn/post/6844904147729252366">服务端压测怎么做</a><br>
<a href="https://www.infoq.cn/article/k9kx0rxebhht*ilut9iv">推荐几款常用的性能测试工具</a><br>
<a href="https://testerhome.com/articles/19639">如何做好性能压测 2-性能压测工具选型对比</a></p>
]]></content>
    </entry>
</feed>